-- синтаксис оконных функций
-- аргументы кроме over являются необязательными
select *, функция(аргументы) over(partition by название полей order by название полей <правило обработки строк>)
from employees e 


-- вывести id сотрудника, который первый в списке по этому городу
select employee_id, city, first_value(employee_id) over(partition by city order by employee_id)
from employees e 
order by employee_id

-- берем окно не между первой и текущей строчкой (по умолчанию), а первой и последней
range between unbounded preceding and unbounded following 
range between 1 preceding and 1 following 

select employee_id, city, first_value(employee_id) over(partition by city order by employee_id
range between unbounded preceding and unbounded following )
from employees e 
order by employee_id

-- row_number() нумерует строки
select product_id, od.order_id, order_date,
    row_number() over(partition by product_id order by order_date desc)
from order_details od 
join orders o
on od.order_id = o.order_id 
order by product_id, order_date desc


-- rank ранжирует строки от значений в столбце
-- ранжирование с разрывами
select *,
    rank() over(order by quantity desc)
from order_details od 

-- dense_rank ранжирует строки от значений в столбце бeз разрывов
select *,
    dense_rank() over(order by quantity desc)
from order_details od 


-- функции lag и lead выполняют сдвиг строк внутри окна
select order_id, employee_id, order_date,
   lag(order_date) over(partition by employee_id order by order_id),
   lead(order_date) over(partition by employee_id order by order_id)
from orders o
order by employee_id, order_date desc 


-- функции lag и lead помогают рассчитать динамику, разницу между соседними значениями
-- количество дней между последней и предпоследней продажей
select order_id, employee_id, ld - lg
from (
select order_id, employee_id, order_date,
   lag(order_date) over(partition by employee_id order by order_id) as lg,
   lead(order_date) over(partition by employee_id order by order_id) as ld
from orders o
order by employee_id, order_date desc 
) t

-- рассчитать среднюю цену для каждого продукта
select *, avg(unit_price) over(partition by product_id)
from order_details od 

-- рассчитать отклюнения цены продукта от средней
select *, unit_price - avg(unit_price) over(partition by product_id)
from order_details od 


-- рассчитать сумму каждого заказа и дату
with t as(
     select order_id, sum(unit_price * quantity) as sm
     from order_details od 
     group by order_id 
), t2 as (
    select t.order_id, t.sm, o.order_date 
    from t
    join orders o
    on t.order_id = o.order_id
)
-- рассчитать накопительный итог
select *, sum(sm) over(order by order_date) as cum_sum
from t2

